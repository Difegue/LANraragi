on:
  push:
    branches:
    - dev
    - test-builds
name: Continuous Delivery
jobs:
  buildNightlyDocker:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@master
    - name: Set up Docker Buildx
      uses: crazy-max/ghaction-docker-buildx@v1.5.0
      with:
        buildx-version: v0.3.1
        qemu-version: latest
    - uses: actions/cache@v1
      with:
        path: /tmp/buildxcache
        key: ${{ runner.os }}-docker-buildx-${{ hashFiles('**') }}
        restore-keys: |
          ${{ runner.os }}-docker-buildx-
    - name: Docker Login
      env:
        DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
        DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
      run: |
        echo "${DOCKER_PASSWORD}" | docker login -u ${DOCKER_USERNAME} --password-stdin

    - name: Build/Push Nightly Docker
      run: |
        if [ -f /tmp/buildxcache/index.json ]; then
          echo "Using buildx cache!"
          docker buildx build --pull \
            --platform linux/386,linux/amd64,linux/arm/v6,linux/arm/v7,linux/arm64,linux/ppc64le,linux/s390x \
            --output "type=image,push=true" \
            --tag difegue/lanraragi:nightly \
            --cache-from=type=local,src=/tmp/buildxcache \
            --cache-to=type=local,dest=/tmp/buildxcache \
            --file ./tools/build/docker/Dockerfile .
        else
          docker buildx build --pull \
            --platform linux/386,linux/amd64,linux/arm/v6,linux/arm/v7,linux/arm64,linux/ppc64le,linux/s390x \
            --output "type=image,push=true" \
            --tag difegue/lanraragi:nightly \
            --cache-to=type=local,dest=/tmp/buildxcache \
            --file ./tools/build/docker/Dockerfile .
        fi
    - name: Run docker-slim on Docker image
      run: |
        wget https://downloads.dockerslim.com/releases/1.29.0/dist_linux.tar.gz
        tar xf dist_linux.tar.gz
        mv ./dist_linux/docker-slim{,-sensor} /usr/local/bin/
        sed -i "s@__ARCHIVE_HASH__@$(sha1sum ./tools/build/docker/sample_content/testzip.zip | cut -d" " -f1)@" probeCmds.json
        docker-slim build --show-clogs --show-blogs \
        --mount $(pwd)/tools/build/docker/sample_content/:/home/koyomi/lanraragi/content
        --http-probe-cmd-file ./tools/build/docker/probeCmds.json \
        --include-path /usr/local/share/perl5/ \
        --include-path /home/koyomi/ \
        --include-path /usr/local/lib/perl5/ \
        --continue-after 30 \
        --entrypoint 'sh -c "apk add perl-utils && prove -l /home/koyomi/lanraragi/tests/*.t; /home/koyomi/lanraragi/tools/build/docker/entrypoint.sh"' \
        --tag difegue/lanraragi:nightly.slim \
        difegue/lanraragi:nightly

  exportDockerRootFS:
    name: Build and export Docker rootfs for Windows build
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@master
    - name: Docker Build and export
      run: |
        docker build -t difegue/lanraragi -f ./tools/build/docker/Dockerfile .
        docker create --name rootfs difegue/lanraragi
        docker export --output=package.tar rootfs
    - name: Upload rootfs
      uses: actions/upload-artifact@v1
      with:
        name: package
        path: package.tar

  buildNightlyWSL:
    name: Build Nightly Windows Package
    needs: exportDockerRootFS
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@master
    - name: Download package
      uses: actions/download-artifact@v1
      with:
        name: package
    - name: Build MSI Installer
      shell: powershell
      run: |
        Import-Module "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\Common7\Tools\Microsoft.VisualStudio.DevShell.dll";
        Enter-VsDevShell -VsInstallPath "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise" -SkipAutomaticLocation
        $ErrorActionPreference = 'Continue'
        git submodule init
        git submodule update
        choco install nuget.commandline
        ./tools/build/windows/build.ps1
    - name: Upload Installer
      uses: actions/upload-artifact@v1
      with:
        name: wsl
        path: ./tools/build/windows/Karen/Setup/bin/LANraragi.msi

  uploadInstaller:
    name: Upload Installer to MEGA
    needs: buildNightlyWSL
    runs-on: ubuntu-latest
    steps:
    - name: Download package
      uses: actions/download-artifact@v1
      with:
        name: wsl
    - name: Upload Installer to MEGA
      uses: difegue/action-megacmd@master
      env:
        PASSWORD: ${{ secrets.MEGA_PASSWORD }}
        USERNAME: ${{ secrets.MEGA_USERNAME }}
      with:
        args: put -c wsl/LANraragi.msi Windows_Nightlies/LRR_${GITHUB_SHA}.msi
