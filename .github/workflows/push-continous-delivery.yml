on: 
  push:
    branches:
    - dev
    - test-builds
name: Continuous Delivery 
jobs:
  buildNightlyDocker:
    name: Build Docker Image
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: [amd64, arm32v6, arm64v8]
    steps:
    - uses: actions/checkout@master
    - name: Build/Push Nightly Docker image
      env:
        ARCH: ${{ matrix.arch }}
        DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
        DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
      run: |
        echo "${DOCKER_PASSWORD}" | docker login -u ${DOCKER_USERNAME} --password-stdin
        chmod +x ./tools/build/docker-multiarch/build-docker.sh
        npm run docker-build-multiarch ${ARCH} nightly
        
  pushNightlyDocker:
    name: Push Multi-Arch manifest
    runs-on: ubuntu-latest
    needs: buildNightlyDocker
    steps:
    - uses: actions/checkout@master
    - name: Login and Push to Docker Hub
      env:
        DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
        DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
        DOCKER_CLI_EXPERIMENTAL: enabled
      run: |
        echo "${DOCKER_PASSWORD}" | docker login -u ${DOCKER_USERNAME} --password-stdin
        chmod +x ./tools/build/docker-multiarch/push-docker.sh
        npm run docker-push-multiarch nightly

  exportDockerRootFS:
    name: Build and export Docker rootfs for Windows build
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@master
    - name: Docker Build and export
      run: |
        docker build -t difegue/lanraragi -f ./tools/build/docker/Dockerfile .
        docker create --name rootfs difegue/lanraragi 
        docker export --output=package.tar rootfs
    - name: Upload rootfs
      uses: actions/upload-artifact@v1
      with:
        name: package
        path: package.tar 

  buildNightlyWSL:
    name: Build Nightly Windows Package
    needs: exportDockerRootFS
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@master
    - name: Download package
      uses: actions/download-artifact@v1
      with:
        name: package
    - name: Build MSI Installer
      shell: powershell
      run: |
        Import-Module "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\Common7\Tools\Microsoft.VisualStudio.DevShell.dll"; 
        Enter-VsDevShell -VsInstallPath "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise" -SkipAutomaticLocation
        $ErrorActionPreference = 'Continue'
        git submodule init
        git submodule update
        choco install nuget.commandline
        ./tools/build/windows/build.ps1
    - name: Upload Installer
      uses: actions/upload-artifact@v1
      with:
        name: wsl
        path: ./tools/build/windows/Karen/Setup/bin/LANraragi.msi
  
  uploadInstaller:
    name: Upload Installer to MEGA
    needs: buildNightlyWSL
    runs-on: ubuntu-latest
    steps:
    - name: Download package
      uses: actions/download-artifact@v1
      with:
        name: wsl
    - name: Upload Installer to MEGA
      uses: difegue/action-megacmd@master
      env:
        PASSWORD: ${{ secrets.MEGA_PASSWORD }}
        USERNAME: ${{ secrets.MEGA_USERNAME }}
      with:
        args: put -c wsl/LANraragi.msi Windows_Nightlies/LRR_${GITHUB_SHA}.msi
