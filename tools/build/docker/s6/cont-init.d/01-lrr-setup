#!/bin/sh

USER_ID=${LRR_UID}
GROUP_ID=${LRR_GID}
FIX_PERMS=${LRR_AUTOFIX_PERMISSIONS:-1}

echo "Starting LANraragi with UID/GID : $USER_ID/$GROUP_ID"

#Update the koyomi user, using the specified uid/gid.
#This solves permission problems on the content folder if the Docker user sets the same uid as the owner of the folder.
usermod -o -u $USER_ID koyomi
groupmod -o -g $GROUP_ID koyomi
chown koyomi /home/koyomi/lanraragi

#Crash with an error if content folder doesn't exist
if [ ! -d "/home/koyomi/lanraragi/content" ]; then
  echo "Content folder doesn't exist! Please ensure your Docker mappings are correct."
  exit 1
fi

#Ensure database is writable
chown -R koyomi /home/koyomi/lanraragi/database
chmod -R u+rwx /home/koyomi/lanraragi/database

if [ "$FIX_PERMS" -eq 1 ]; then
  echo "Fixing permissions, hold on!"
  
  #Ensure thumbnail folder is writable
  chown -R koyomi /home/koyomi/lanraragi/thumb
  find /home/koyomi/lanraragi/thumb -type f -exec chmod u+rw  {} \;
  find /home/koyomi/lanraragi/thumb -type d -exec chmod u+rwx {} \;

  chown -R koyomi /home/koyomi/lanraragi/lib/LANraragi/Plugin/Sideloaded
  chmod u+rwx /home/koyomi/lanraragi/lib/LANraragi/Plugin/Sideloaded
  find /home/koyomi/lanraragi/lib/LANraragi/Plugin/Sideloaded -type f -exec chmod u+rwx {} \;

  # Ensure the rest of the content folder is at least readable
  find /home/koyomi/lanraragi/content -name thumb -prune -o -type f -exec chmod u+r  {} \;
  find /home/koyomi/lanraragi/content -name thumb -prune -o -type d -exec chmod u+rx {} \;
else
    echo "Not touching permissions"
fi

#Ensure log folder is writable
mkdir /home/koyomi/lanraragi/log
chown -R koyomi /home/koyomi/lanraragi/log
chmod u+rwx /home/koyomi/lanraragi/log

#Ensure temp folder is writable
mkdir /home/koyomi/lanraragi/public/temp
chown -R koyomi /home/koyomi/lanraragi/public/temp
chmod u+rwx /home/koyomi/lanraragi/public/temp

#Remove mojo, minion and shinobu pid files
if [ -f /home/koyomi/lanraragi/public/temp/server.pid ]; then
    rm /home/koyomi/lanraragi/public/temp/server.pid
fi
if [ -f /home/koyomi/lanraragi/public/temp/shinobu.pid ]; then
    rm /home/koyomi/lanraragi/public/temp/shinobu.pid
fi
if [ -f /home/koyomi/lanraragi/public/temp/shinobu.pid-s6 ]; then
    rm /home/koyomi/lanraragi/public/temp/shinobu.pid-s6
fi
if [ -f /home/koyomi/lanraragi/public/temp/minion.pid ]; then
    rm /home/koyomi/lanraragi/public/temp/minion.pid
fi
if [ -f /home/koyomi/lanraragi/public/temp/minion.pid-s6 ]; then
  rm /home/koyomi/lanraragi/public/temp/minion.pid-s6
fi

# https://redis.io/topics/faq#background-saving-fails-with-a-fork-error-under-linux-even-if-i-have-a-lot-of-free-ram
OVERCOMMIT=$(cat /proc/sys/vm/overcommit_memory)
if [ $OVERCOMMIT -eq 0 ]
then
        echo "WARNING: overcommit_memory is set to 0! This might lead to background saving errors if your database is too large."
            echo "Please check https://redis.io/topics/faq#background-saving-fails-with-a-fork-error-under-linux-even-if-i-have-a-lot-of-free-ram for details."
fi
